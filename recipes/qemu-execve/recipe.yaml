context:
  name: qemu-system
  version: "9.1.0"
  emulated_c_stdlib: "sysroot"
  emulated_c_stdlib_version: "2.17"
  qemu_bins: ${{ [
    "bios.bin", "bios-256k.bin", "bios-microvm.bin", "qboot.rom", "vgabios.bin", "vgabios-cirrus.bin",
    "vgabios-stdvga.bin", "vgabios-vmware.bin", "vgabios-qxl.bin", "vgabios-virtio.bin", "vgabios-ramfb.bin",
    "vgabios-bochs-display.bin", "vgabios-ati.bin", "openbios-sparc32", "openbios-sparc64", "openbios-ppc",
    "QEMU,tcx.bin", "QEMU,cgthree.bin", "pxe-e1000.rom", "pxe-eepro100.rom", "pxe-ne2k_pci.rom", "pxe-pcnet.rom",
    "pxe-rtl8139.rom", "pxe-virtio.rom", "efi-e1000.rom", "efi-eepro100.rom", "efi-ne2k_pci.rom", "efi-pcnet.rom",
    "efi-rtl8139.rom", "efi-virtio.rom", "efi-e1000e.rom", "efi-vmxnet3.rom", "qemu-nsis.bmp", "multiboot.bin",
    "multiboot_dma.bin", "linuxboot.bin", "linuxboot_dma.bin", "kvmvapic.bin", "pvh.bin", "s390-ccw.img",
    "s390-netboot.img", "slof.bin", "skiboot.lid", "palcode-clipper", "u-boot.e500", "u-boot-sam460-20100605.bin",
    "qemu_vga.ndrv", "edk2-licenses.txt", "hppa-firmware.img", "hppa-firmware64.img",
    "opensbi-riscv32-generic-fw_dynamic.bin", "opensbi-riscv64-generic-fw_dynamic.bin", "npcm7xx_bootrom.bin",
    "vof.bin", "vof-nvram.bin", "bamboo.dtb", "canyonlands.dtb", "petalogix-s3adsp1800.dtb", "petalogix-ml605.dtb",
    ] | join(' ') }}
  qemu_keymaps: ${{ [
    "ar", "bepo", "cz", "da", "de", "de-ch", "en-gb", "en-us", "es", "et", "fi", "fo", "fr", "fr-be", "fr-ca",
    "fr-ch", "hr", "hu", "is", "it", "ja", "lt", "lv", "mk", "nl", "no", "pl", "pt", "pt-br", "ru", "th", "tr"
    ] | join(' ') }}
  qemu_system_share: ${{ [
      "edk2-aarch64-code.fd", "edk2-arm-code.fd", "edk2-arm-vars.fd", "edk2-riscv-code.fd", "edk2-riscv-vars.fd",
      "edk2-i386-code.fd", "edk2-i386-secure-code.fd", "edk2-i386-vars.fd", "edk2-x86_64-code.fd",
      "edk2-x86_64-secure-code.fd",
      ] | join(' ') }}
  qemu_system_firmware: ${{ [
      "50-edk2-i386-secure.json", "50-edk2-x86_64-secure.json", "60-edk2-aarch64.json", "60-edk2-arm.json",
      "60-edk2-i386.json", "60-edk2-x86_64.json",
      ] | join(' ') }}

package:
  name: qemu-system
  version: ${{ version }}

source:
  - url: https://gitlab.com/qemu-project/qemu/-/archive/v9.1.0/qemu-v${{ version }}.tar.gz
    sha256: 7a0d0e6b7e955d03c0d418025d8551146dbd4ec0128c1fb7dec791b94de7bbb7
    target_directory: qemu_source
    patches:
      - if: osx
        then:
          - patches/0001-osx-configure.patch
          - patches/0002-osx-attr-meson.build.patch
          - patches/0003-osx-block_file-posix.c.patch
          - patches/0004-osx-audio_coreaudio.m.patch
      - if: win
        then:
          - patches/0002-win-configure-pyvenv.patch
          - patches/0003-win-dbg-MESONINTROSPECT.patch
          - patches/0004-win-fix-PYTHON-var-Makefile.patch
          - patches/0005-win-fix-tracetool-path.patch

  # - url: https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/aarch64/alpine-minirootfs-3.20.3-aarch64.tar.gz  # [osx]
  #   sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855  # [osx]
  - if: osx
    then:
      - url: https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/aarch64/alpine-virt-${{ alpine_iso_version }}-aarch64.iso
        sha256: dbd0c2eaa0bfa39e18d075dae07760a9055ffdee0a338c8a35059413b0f76fec
      - url: https://releases.linaro.org/components/kernel/uefi-linaro/latest/release/qemu64/QEMU_EFI.fd
        sha256: 42f915c44de6858f69ae6f1ffc9eaa3884d1b2ca97a7537d81312fb0dfd712cd

build:
  number: 0
  skip:
    - win
    - linux
  script:
    env:
      ALPINE_ISO_VERSION: ${{ alpine_iso_version }}
    content:
      if: win
      then: cmd /c "build.bat"
      else: bash build.sh

requirements:
  build:
    - ninja
    - pkg-config
    - python ==3.12
    - if: unix
      then:
        - ${{ compiler("c") }}
        - ${{ stdlib("c") }}
        - autoconf
        - automake
        - libtool
        - make
        - patchelf
    - if: linux
      then:
        - ${{ emulated_c_stdlib }}_linux-aarch64 ${{ emulated_c_stdlib_version }}.*
        - ${{ emulated_c_stdlib }}_linux-ppc64le ${{ emulated_c_stdlib_version }}.*
        - gcc_impl_linux-aarch64
        - gcc_impl_linux-ppc64le
    - if: osx
      then:
        - clang_osx-arm64
        - dtc
        - libfdt
        - meson
        - python-qemu-qmp
    - if: win
      then:
        - ${{ compiler("m2w64_c") }}
        - ${{ stdlib("m2w64_c") }}
        - binutils
        - gettext
        - m2-autoconf
        - m2-automake-wrapper
        - m2-findutils
        - m2-grep
        - m2-libtool
        - m2-make
        - m2-which
        - packaging
  host:
    - glib
    - meson >=1.1.0
    - sphinx >=3.4.3
    - sphinx-rtd-theme >=0.5
    - zlib
    - if: win
      then:
        - bzip2
    - if: osx
      then:
        - llvmdev
        - zstd
  run:
    - ${{ pin_subpackage('qemu-execve-headers') }}
    - if: unix
      then: ${{ emulated_c_stdlib }}_linux-aarch64 ${{ emulated_c_stdlib_version }}.*

tests:
  - package_contents:
      files:
        - ${{ "Library/" if win }}include/qemu-plugin.h
        - share/qemu/trace-events-all
        - if: unix
          then:
            - bin/qemu-system-aarch64
            - etc/conda/activate.d/qemu-execve-aarch64-activate.sh
            - etc/conda/deactivate.d/qemu-execve-aarch64-deactivate.sh
          else:
            - bin/qemu-system-aarch64.exe
            - etc/conda/activate.d/qemu-execve-aarch64-activate.bat
            - etc/conda/deactivate.d/qemu-execve-aarch64-deactivate.bat

  - script: |
      _PREFIX="$PREFIX" python -c 'import os; from pathlib import Path; share = os.environ.get("_PREFIX") + "/share/qemu"; \
          missing_bins = [f"{share}/{b}" for b in "${{ qemu_bins }}".split() if not Path(f"{share}/{b}").exists()]; \
          print("Missing binaries:", missing_bins) or exit(1 if missing_bins else 0);'

      _PREFIX="$PREFIX" python -c 'import os; from pathlib import Path; share = os.environ.get("_PREFIX") + "/share/qemu/keymaps"; \
          missing_bins = [f"{share}/{b}" for b in "${{ qemu_keymaps }}".split() if not Path(f"{share}/{b}").exists()]; \
          print("Missing keymaps:", missing_bins) or exit(1 if missing_bins else 0);'

      _PREFIX="$PREFIX" python -c 'import os; from pathlib import Path; share = os.environ.get("_PREFIX") + "/share/qemu"; \
          missing_bins = [f"{share}/{b}" for b in "${{ qemu_system_share }}".split() if not Path(f"{share}/{b}").exists()]; \
          print("Missing share:", missing_bins) or exit(1 if missing_bins else 0);'

      _PREFIX="$PREFIX" python -c 'import os; from pathlib import Path; share = os.environ.get("_PREFIX") + "/share/qemu/firmware"; \
          missing_bins = [f"{share}/{b}" for b in "${{ qemu_system_firmware }}".split() if not Path(f"{share}/{b}").exists()]; \
          print("Missing firmware:", missing_bins) or exit(1 if missing_bins else 0);'

      qemu-system --help
    requirements:
      run:
        - python >=3.10


about:
  homepage: https://gitlab.com/qemu-project/qemu
  summary: 'QEMU is a generic and open source machine & userspace emulator and virtualizer.'
  description: |
    Patched QEMU to intercept and log execve calls.
  license: GPL-2.0-only
  license_file: qemu_source/LICENSE
  documentation: https://www.qemu.org/documentation/
  repository: https://gitlab.com/qemu-project/qemu

extra:
  recipe-maintainers:
    -  MementoRC
  feedstock-name: qemu-system
