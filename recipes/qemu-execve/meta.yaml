{% set name = 'qemu-execve' %}
{% set version = '9.1.0' %}

{% set posix = 'm2-' if win else '' %}
{% set os_platform = build_platform.split('-')[0] %}

{% set qemu_bins = [
    "bios.bin", "bios-256k.bin", "bios-microvm.bin", "qboot.rom", "vgabios.bin", "vgabios-cirrus.bin",
    "vgabios-stdvga.bin", "vgabios-vmware.bin", "vgabios-qxl.bin", "vgabios-virtio.bin", "vgabios-ramfb.bin",
    "vgabios-bochs-display.bin", "vgabios-ati.bin", "openbios-sparc32", "openbios-sparc64", "openbios-ppc",
    "QEMU,tcx.bin", "QEMU,cgthree.bin", "pxe-e1000.rom", "pxe-eepro100.rom", "pxe-ne2k_pci.rom", "pxe-pcnet.rom",
    "pxe-rtl8139.rom", "pxe-virtio.rom", "efi-e1000.rom", "efi-eepro100.rom", "efi-ne2k_pci.rom", "efi-pcnet.rom",
    "efi-rtl8139.rom", "efi-virtio.rom", "efi-e1000e.rom", "efi-vmxnet3.rom", "qemu-nsis.bmp", "multiboot.bin",
    "multiboot_dma.bin", "linuxboot.bin", "linuxboot_dma.bin", "kvmvapic.bin", "pvh.bin", "s390-ccw.img",
    "s390-netboot.img", "slof.bin", "skiboot.lid", "palcode-clipper", "u-boot.e500", "u-boot-sam460-20100605.bin",
    "qemu_vga.ndrv", "edk2-licenses.txt", "hppa-firmware.img", "hppa-firmware64.img",
    "opensbi-riscv32-generic-fw_dynamic.bin", "opensbi-riscv64-generic-fw_dynamic.bin", "npcm7xx_bootrom.bin",
    "vof.bin", "vof-nvram.bin", "bamboo.dtb", "canyonlands.dtb", "petalogix-s3adsp1800.dtb", "petalogix-ml605.dtb"
  ]
%}

{% set qemu_keymaps = [
    "ar", "bepo", "cz", "da", "de", "de-ch", "en-gb", "en-us", "es", "et", "fi", "fo", "fr", "fr-be", "fr-ca",
    "fr-ch", "hr", "hu", "is", "it", "ja", "lt", "lv", "mk", "nl", "no", "pl", "pt", "pt-br", "ru", "th", "tr"
  ]
%}

package:
  name: qemu-execve-split
  version: {{ version }}

source:
  url: https://gitlab.com/qemu-project/qemu/-/archive/v9.1.0/qemu-v{{ version }}.tar.gz
  sha256: 7a0d0e6b7e955d03c0d418025d8551146dbd4ec0128c1fb7dec791b94de7bbb7
  patches:
    - patches/0001-intercept-qexecve.patch
    - patches/0002-osx-attr-meson.build.patch  # [osx]
    - patches/0003-osx-block_file-posix.c.patch  # [osx]
    - patches/0004-osx-audio_coreaudio.m.patch  # [osx]
  folder: qemu-source

build:
  number: 0

requirements:
  build:
    - {{ compiler('c') }}  # [unix]
    - {{ compiler('m2w64_c') }}  # [win]
    - {{ c_stdlib }}_{{ os_platform }}-aarch64 {{ c_stdlib_version }}.*  # [linux]
    - {{ c_stdlib }}_{{ os_platform }}-ppc64le {{ c_stdlib_version }}.*  # [linux]
    - {{ stdlib('c') }}  # [unix]
    - {{ stdlib('m2w64_c') }}  # [win]
    - {{ posix }}autoconf
    - {{ posix }}automake-wrapper  # [win]
    - {{ posix }}findutils  # [win]
    - {{ posix }}grep  # [win]
    - {{ posix }}libtool
    - {{ posix }}make
    - {{ posix }}pkg-config
    - {{ posix }}which  # [win]
    - automake  # [unix]
    - ninja
    - gcc_impl_{{ os_platform }}-aarch64  # [linux]
    - gcc_impl_{{ os_platform }}-ppc64le  # [linux]
    - clang_{{ os_platform }}-arm64  # [osx]
    - glib
  host:
    - glib
    - llvmdev  # [osx]
    - meson >=1.1.0
    - python ==3.12
    - sphinx >=3.4.3
    - sphinx-rtd-theme >=0.5
    - zlib

outputs:
  - name: qemu-execve-headers
    script: install-share.sh  # [unix]
    files:
      - include/qemu-plugin.h  # [unix]
      - Library\\include\\qemu-plugin.h  # [win]

      {% for bin in qemu_bins %}
      - share/qemu/{{ bin }}  # [unix]
      - share\\qemu\\{{ bin }}  # [win]
      {% endfor %}
      {% for keymap in qemu_keymaps %}
      - share/qemu/keymaps/{{ keymap }}  # [unix]
      - share\\qemu\\keymaps\\{{ keymap }}  # [win]
      {% endfor %}

      - share/qemu/trace-events-all  # [unix]
      - share\\qemu\\trace-events-all  # [win]

      - share/man/man1/qemu.1  # [unix]
      - share\\man\\man1\\qemu.1  # [win]
      - share/man/man7/qemu-block-drivers.7  # [unix]
      - share/man/man7/qemu-cpu-models.7  # [unix]
      - share/man/man7/qemu-qmp-ref.7  # [unix]
      - share\\man\\man7\\qemu-block-drivers.7  # [win]
      - share\\man\\man7\\qemu-cpu-models.7  # [win]
      - share\\man\\man7\\qemu-qmp-ref.7  # [win]
    requirements:
      host:
      run:
    test:
      commands:
        - test -f ${PREFIX}/include/qemu-plugin.h  # [unix]
        - if not exist %PREFIX%\\Library\\include\\qemu-plugin.h exit 1  # [win]

        - test -d ${PREFIX}/share/qemu
        {% for bin in qemu_bins %}
        - test -f ${PREFIX}/share/qemu/{{ bin }}  # [unix]
        - if not exist %PREFIX%\\share\\qemu\\{{ bin }} exit 1  # [win]
        {% endfor %}
        {% for keymap in qemu_keymaps %}
        - test -f ${PREFIX}/share/qemu/keymaps/{{ keymap }}  # [unix]
        - if not exist %PREFIX%\\share\\qemu\\keymaps\\{{ keymap }}.map exit 1  # [win]
        {% endfor %}
        - test -f ${PREFIX}/share/qemu/trace-events-all  # [unix]
        - if not exist %PREFIX%\\share\\qemu\\trace-events-all exit 1  # [win]

        - test -f ${PREFIX}/share/man/man1/qemu.1  # [unix]
        - test -f ${PREFIX}/share/man/man7/qemu-block-drivers.7  # [unix]
        - test -f ${PREFIX}/share/man/man7/qemu-cpu-models.7  # [unix]
        - test -f ${PREFIX}/share/man/man7/qemu-qmp-ref.7  # [unix]
        - if not exist %PREFIX%\\share\\man\\man1\\qemu.1 exit 1  # [win]
        - if not exist %PREFIX%\\share\\man\\man7\\qemu-block-drivers.7 exit 1  # [win]
        - if not exist %PREFIX%\\share\\man\\man7\\qemu-cpu-models.7 exit 1  # [win]
        - if not exist %PREFIX%\\share\\man\\man7\\qemu-qmp-ref.7 exit 1  # [win]

  - name: qemu-execve-aarch64
    script: install-aarch64.sh  # [unix]
    files:
      - bin/qemu-execve-aarch64  # [unix]
      - bin\\qemu-execve-aarch64.exe  # [win]

      - etc/conda/activate.d/qemu-execve-aarch64-activate.sh  # [unix]
      - etc/conda/deactivate.d/qemu-execve-aarch64-deactivate.sh  # [unix]
      - etc\\conda\\activate.d\\qemu-execve-aarch64-activate.bat exit /b 1  # [win]
      - etc\\conda\\deactivate.d\\qemu-execve-aarch64-deactivate.bat exit /b 1  # [win]
    requirements:
      build:
        - {{ compiler('c') }}  # [unix]
        - {{ compiler('m2w64_c') }}  # [win]
        - {{ cross_c_stdlib }}_{{ os_platform }}-aarch64 {{ cross_c_stdlib_version }}.*  # [linux]
        - {{ stdlib('c') }}  # [unix]
        - {{ stdlib('m2w64_c') }}  # [win]
      host:
        - {{ pin_subpackage('qemu-execve-headers') }}
        - glib
        - zlib
      run:
        - {{ cross_c_stdlib }}_{{ os_platform }}-aarch64 {{ cross_c_stdlib_version }}.*  # [linux]
        - {{ pin_subpackage('qemu-execve-headers') }}
    test:
      files:
        - tests
      requires:
        - gcc_impl_{{ os_platform }}-aarch64  # [linux]
        - gcc_impl_win-amd64  # [win]
      commands:
        - test -f ${PREFIX}/bin/qemu-execve-aarch64  # [unix]
        - if not exist %PREFIX%\\Library\\bin\\qemu-execve-aarch64.exe exit 1  # [win]

        - test -f ${QEMU_LD_PREFIX}/ld-linux-aarch64.so.1  # [linux]
        - test -f ${QEMU_LD_PREFIX}/ld-2.28.so  # [linux]

        - test -f ${PREFIX}/etc/conda/activate.d/qemu-execve-aarch64-activate.sh  # [unix]
        - test -f ${PREFIX}/etc/conda/deactivate.d/qemu-execve-aarch64-deactivate.sh  # [unix]
        - if not exist %PREFIX%\\etc\\conda\\activate.d\\qemu-execve-aarch64-activate.bat exit /b 1  # [win]
        - if not exist %PREFIX%\\etc\\conda\\deactivate.d\\qemu-execve-aarch64-deactivate.bat exit /b 1  # [win]

        {% if os_platform == 'linux' %}
        - aarch64-conda-linux-gnu-gcc -Wl,-dynamic-linker,${QEMU_LD_PREFIX}/ld-linux-aarch64.so.1 -Wl,-rpath,${QEMU_LD_PREFIX} -o hello_from tests/hello_from.c
        - aarch64-conda-linux-gnu-gcc -Wl,-dynamic-linker,${QEMU_LD_PREFIX}/ld-linux-aarch64.so.1 -Wl,-rpath,${QEMU_LD_PREFIX} -o execve_call tests/execve_call.c

        # Print "hello_from" and exit - qemu returns exit code 41 - need to figure out why - true for now
        - qemu-execve-aarch64 ./hello_from "AARCH64" > hello.txt 2>&1 || true
        - grep "AARCH64" hello.txt || exit 1

        # Call execve() passes to x86_64 and interprets system /bin/ls
        - qemu-execve-aarch64 ./execve_call "/bin/ls" > ls_x86_64.txt 2>&1 || true
        - grep "hello_from" ls_x86_64.txt || exit 1

        # Call execve() passes to aarch64 interpreter and fails on system /bin/ls
        - QEMU_EXECVE=${PREFIX}/bin/qemu-execve-aarch64 qemu-execve-aarch64 ./execve_call "/bin/ls" > ls_aarch64.txt 2>&1 || true
        - grep "Invalid ELF image" ls_aarch64.txt || exit 1

        # Call hello_from (AARCH64) with execve(), which passes to aarch64 interpreter and execute aarch64 ./hello_from
        - QEMU_EXECVE=${PREFIX}/bin/qemu-execve-aarch64 qemu-execve-aarch64 ./execve_call "./hello_from" "EXECVE" > execve_call.txt 2>&1 || true
        - grep "EXECVE" execve_call.txt || exit 1
        {% endif %}


  {% if os_platform == 'linux' %}
  - name: qemu-execve-ppc64le
    script: install-ppc64le.sh
    files:
      - bin/qemu-execve-ppc64le

      - etc/conda/activate.d/qemu-execve-ppc64le-activate.sh
      - etc/conda/deactivate.d/qemu-execve-ppc64le-deactivate.sh
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ cross_c_stdlib }}_{{ os_platform }}-ppc64le {{ cross_c_stdlib_version }}.*
        - {{ stdlib('c') }}
      host:
        - {{ pin_subpackage('qemu-execve-headers') }}
        - glib
      run:
        - {{ c_stdlib }}_{{ target_platform }} {{ c_stdlib_version }}.*
        - {{ cross_c_stdlib }}_{{ os_platform }}-ppc64le {{ cross_c_stdlib_version }}.*
        - {{ pin_subpackage('qemu-execve-headers') }}
    test:
      files:
        - tests
      requires:
        - gcc_impl_{{ os_platform }}-ppc64le
      commands:
        - test -f ${PREFIX}/bin/qemu-execve-ppc64le

        - test -f ${PREFIX}/etc/conda/activate.d/qemu-execve-ppc64le-activate.sh
        - test -f ${PREFIX}/etc/conda/deactivate.d/qemu-execve-ppc64le-deactivate.sh

        - test -f ${QEMU_LD_PREFIX}/ld64.so.2
        - test -f ${QEMU_LD_PREFIX}/ld-2.28.so

        - powerpc64le-conda-linux-gnu-gcc -Wl,-dynamic-linker,${QEMU_LD_PREFIX}/ld64.so.2 -Wl,-rpath,${QEMU_LD_PREFIX} -o hello_from tests/hello_from.c
        - powerpc64le-conda-linux-gnu-gcc -Wl,-dynamic-linker,${QEMU_LD_PREFIX}/ld64.so.2 -Wl,-rpath,${QEMU_LD_PREFIX} -o execve_call tests/execve_call.c

        # Print "hello_from" and exit - qemu returns exit code 41 - need to figure out why - true for now
        - qemu-execve-ppc64le ./hello_from "PPC64LE" > hello.txt 2>&1 || true
        - grep "PPC64LE" hello.txt || exit 1

        # Call execve() passes to x86_64 and interprets system /bin/ls
        - qemu-execve-ppc64le ./execve_call "/bin/ls" > ls_x86_64.txt 2>&1 || true
        - grep "hello_from" ls_x86_64.txt || exit 1

        # Call execve() passes to ppc64le interpreter and fails on system /bin/ls
        - QEMU_EXECVE=${PREFIX}/bin/qemu-execve-ppc64le qemu-execve-ppc64le ./execve_call "/bin/ls" > ls_ppc64le.txt 2>&1 || true
        - grep "Invalid ELF image" ls_ppc64le.txt || exit 1

        # Call execve() passes to ppc64le interpreter and execute ppc64le ./hello_from
        - QEMU_EXECVE=${PREFIX}/bin/qemu-execve-ppc64le qemu-execve-ppc64le ./execve_call "./hello_from" "EXECVE" > execve_call.txt 2>&1 || true
        - grep "EXECVE" execve_call.txt || exit 1
  {% endif %}

about:
  home: https://gitlab.com/qemu-project/qemu
  summary: 'QEMU is a generic and open source machine & userspace emulator and virtualizer.'
  description: |
    Patched QEMU to intercept and log execve calls.
  license: GPL-2.0-only
  license_file: qemu-source/LICENSE
  doc_url: https://www.qemu.org/documentation/
  dev_url: https://www.qemu.org/docs/master/

extra:
  recipe-maintainers:
    -  MementoRC
  feedstock-name: qemu-execve
